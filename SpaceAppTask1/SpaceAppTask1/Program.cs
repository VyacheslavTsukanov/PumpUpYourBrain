using System;
using System.Linq;

namespace SpaceAppTask1
{
    class Program
    {

        static void Main(string[] args)
        {

            // 2001. A+B
            /*
             * Заданы a и b. Выведите a+b.
             * Входные данные
             * В единственной строке входных данных заданы целочисленные a и b(1 ≤ a,b ≤ 1000).
             * 
             * Выходные данные
             * 
             * Выведите a+b.  
             */



            //int a = 13;
            //int b = 27;

            //if(1 <= a)
            //{
            //    Console.WriteLine("1 <= 13");
            //}
            //else if(b <= 1000)
            //{
            //    Console.WriteLine("27 <= 1000");
            //}
            //else
            //{
            //    Console.WriteLine("!1!");
            //}

            //Console.WriteLine(a+b);
            /////////////////////////////////////////////////////////////////////////


            // 2002. Сумма чисел
            /* 
             * Задано n целых чисел. Выведите их сумму.

                Входные данные
                В первой строке задано целое число n (1 ≤ n ≤ 10000). Вторая строка содержит n целых чисел, 
                каждое от 1 до 10000, включительно.

                Выходные данные
                Выведите искомую сумму.
            */

            //int sum = 0;
            //int n = 1234;

            //while (n > 0)
            //{
            //    sum += n % 10;
            //    n /= 10;
            //}

            //Console.WriteLine(sum);

            /////////////////////////////////////////////////////////////////////////

            // 2003.Альтернированная сумма чисел
            /*
              * Альтернированной суммой заданной последовательности n чисел a1, a2,...,
              * an называется число s=a1-a2+a3-a4+.... В альтернированной сумме знаки слагаемых чередуются, 
              * альтернация начинается со знака "+".
              * 
              * По заданной последовательности целых чисел выведите ее альтернированную сумму.
              * 
              *  Входные данные
              *  В первой строке задано целое число n (1 ≤ n ≤ 10000). 
              *  Вторая строка содержит n целых чисел, каждое от 1 до 10000 включительно.
              *  
              *  Выходные данные
              *  
              *  Выведите искомую альтернированную сумму.

            */

            // var nums = new[] { 1, 2, 3, 4 };
            // var sum = nums.Aggregate((a, b) => a + b);
            // Console.WriteLine(sum); // output: 10 (1+2+3+4)


            // Рандом одного значения
            //Random rand = new Random();
            //int n = rand.Next(1, 10000);

            //int a = 12;
            //int num = 6;

            //Console.WriteLine("Первая строка: " + (1 <= num && num <= 10000));
            //Console.WriteLine("Первая строка: 1 <= " + num + " <= 10000");
            //Console.WriteLine("Вторая строка: " + n);
            //Console.WriteLine(a + a - a + a - a + a);


            // 2004. Високосный год

            /*
            * Задан номер года y. Ваша задача вывести 1, если год високосный. Выведите 0 в противном случае.
            * Год является високосным, если он кратен 4 и при этом не кратен 100, либо кратен 400. Так, годы 1700, 1800 и 1900 
            * не были високосными, так как они кратны 100 и не кратны 400. Год 2000 — високосный, так как он кратен 400. 
            * 2100, 2200 и 2300 — не високосные.
            */


            //int year;
            //Console.WriteLine("Введите число: ");
            //year = int.Parse(Console.ReadLine());

            //// if ( (year % 4 == 0) || (year % 100 != 0) || (year % 400 == 0) )
            //if (year % 400 == 0)
            //{
            //    Console.WriteLine("Yes");
            //}
            //else
            //{
            //    Console.WriteLine("No");
            //}


            // 2005. Индекс первого минимума
            /*
             * Заданы n целых чисел. Выведите индекс (позицию) первого из минимальных элементов последовательности.
             * Элементы последовательности занумерованы от 1 слева направо.
             * 
             * Входные данные
             * 
             * В первой строке записано целое число n (1 ≤ n ≤ 10000).
             * Вторая строка содержит последовательность целых чисел a1, a2,..., an (-10000 ≤ ai ≤ 10000).
             * 
             * Выходные данные
             * Выведите искомый индекс.
             */


            //int[] mass = { 20, 13, 562, 1, 900, 78 };
            //int minVal = mass.Min();                    // Находим минимальное значение
            //int indexMin = Array.IndexOf(mass, minVal); // Находим индекс
            //Console.WriteLine(indexMin);


            //int n = 10;
            //if (1 <= n && n <= 10000)
            //{
            //    Console.WriteLine(n);
            //}
            //Console.WriteLine("Первая строка: 1 <= " + n + " <= 10000");
            //Console.WriteLine("Первая строка: " + (1 <= n && n <= 10000));


            //int a = 10;
            //for (int i = -10000; i <= 10000; i++)
            //{
            //    Console.Write(i + " ");
            //}


            // 2006.Измерение длин в Бадене
            /*
             * В Бадене используют дюймы и футы.
             * Для перевода длины из сантиметров достаточно знать, что в Бадене один дюйм равен трем сантиметрам, 
             * а один фут содержит 12 дюймов.
             * 
             * Задана длина равная n сантиметрам. Ваша задача перевести ее в футы и дюймы так, 
             * чтобы количество футов было максимально. Ответ должен быть целочисленным, округленным к ближайшему значению, 
             * содержащему целое число дюймов.
             * 
             * Пояснение к правилам округления: 1 см округляется к 0 дюймов, в то время как 2 см округляются до 1 дюйма.
             * 
             * Входные данные
             * В единственной строке записано целое число n (1 ≤ n ≤ 10000).
             * 
             * Выходные данные
             * 
             * Выведите два целых неотрицательных числа a и b через пробел, 
             * где a — количество футов, а b — количество дюймов.
             */

            // задача перевести ее в футы и дюймы
            //double d = 2.54;
            //double foot = 30.48;
            //string f;
            //Console.WriteLine("Введите 1, 2 - (1 - см в дюймы, 2 - см в футы)");
            //f = Console.ReadLine();
            //if (f == "1")
            //{
            //    Console.WriteLine("Введите кол-во см");
            //    double a = double.Parse(Console.ReadLine());
            //    a /= d;
            //    Console.WriteLine(a + " дюйм(а)");
            //}
            //else if (f == "2")
            //{
            //    Console.WriteLine("Введите кол-во см");
            //    double a = double.Parse(Console.ReadLine());
            //    a *= foot;
            //    Console.WriteLine(a + " фут(ы)");
            //}

            // 2007. Круглые числа в двоичной системе счисления
            /*
             * При записи в двоичной системе счисления число будет заканчиваться на 0,
             * если оно является четным. Аналогично, число будет заканчиваться на два нуля, если оно делится на 4.
             * 
             * В этой задаче вам надо определить "круглость" числа при записи в двоичной системе счисления, т.е.
             * вам необходимо найти максимальную степень двойки, на которую эту число делится.
             *
             * Напишите программу, которая определяет на сколько нулей заканчивается двоичная запись заданного целого числа n.
             * 
             * Входные данные
             * В единственной строке записано целое число n (1 ≤ n ≤ 109).
             * 
             * Выходные данные
             * 
             * Выведите искомое количество нулей.
             * 
             */


            // 2008. Загрузка грузовика

            /*
              Задана грузоподъемность грузовика w (в тоннах). На него последовательно грузятся предметы массами 
              a1, a2,..., an, где ai — масса i-го груза в тоннах. Если при погрузке очередного предмета рабочие замечают, 
              что в случае завершения процесса суммарный вес погруженных предметов превысит грузоподъемность, 
              то погрузка этого предмета не осуществляется (он пропускается).

              Выведите количество предметов, которые будут погружены в соответствии с алгоритмом выше и их суммарную массу.


              Входные данные
              В первой строке записана пара целых чисел n, w (1 ≤ n ≤ 10000, 1 ≤ w ≤ 10000). 
              Вторая строка содержит последовательность целых чисел a1, a2,..., an (1 ≤ ai ≤ 10000).


              Выходные данные
              Выведите количество погруженных предметов и их суммарную массу.
             
             */

            //int w;
            //int n;
            //Console.WriteLine("Введите сколько тонн: ");
            //w = int.Parse(Console.ReadLine());
            //Console.WriteLine("Введите грузоподъемность: ");
            //n = int.Parse(Console.ReadLine());

            //for (int i = w; i <= 1000; i++)
            //{
            //    if (w <= 1000)
            //    {
            //        Console.WriteLine("Тонн " + w * i);
            //    }
            //}

            //Console.WriteLine("Превышает тонны");

            //for (int j = n; j <= 1000; j++)
            //{
            //    if (n <= 1000)
            //    {
            //        Console.WriteLine("Грузоподъемность " + n * j);
            //    }
            //}
            //Console.WriteLine("Превышает грузоподъемность");



            // 2009. Сумма на степенях двоек

            /*
                Задана последовательность n целых чисел a1, a2,..., an. 
                Выведите сумму всех ее элементов, стоящих на позициях, которые являются степенями двойки: 1, 2, 4, 8, 16 и т.д.


                Входные данные
                В первой строке задано целое число n (1 ≤ n ≤ 10000). 
                Вторая строка содержит последовательность целых чисел a1, a2,..., an.


                Выходные данные
                Выведите искомую сумму.
             
             */

            //int summ;
            //Console.WriteLine("Введите число: ");
            //summ = int.Parse(Console.ReadLine());
            //Console.WriteLine("Число " + summ + " в степени 2 = " + (summ * 2));


            // 2010. Алгоритм Евклида (упрощенная версия)

            /*
             * 
             * Наибольшим общим делителем (НОД) для двух целых чисел m и n называется наибольший из их общих делителей. Например, для чисел 70 и 105 наибольший общий делитель равен 35.
             *
             *    С давних времен известен следующий алгоритм нахождения наибольшего общего делителя двух неотрицательных целых чисел: пока оба числа строго положительны надо из большего числа вычесть меньшее. Результатом работы (наибольшим общим делителем) является большее число после окончания описанной серии вычитаний или 0, если оба числа в конце равны 0.
             *
             *   Вам заданы целые неотрицательные a и b (0 ≤ a,b ≤ 107). Напишите программу, которая выведет количество вычитаний при работе такого алгоритма и результат его работы.
             *
             *
             *   Входные данные
             *  Единственная строка входных данных содержит записанные через пробел целые числа a, b (0 ≤ a,b ≤ 107).
             *
             *
             *   Выходные данные
             *   Выведите количество вычитаний в ходе работы алгоритма и его результат через пробел.
             * 
             */

            //int m, n, nod;
            //m = convert.toint32(console.readline());
            //n = convert.toint32(console.readline());

            //while (m != n)
            //{
            //    if (m > n)
            //    {
            //        m = m - n;
            //    }
            //    else
            //    {
            //        n = n - m;
            //    }
            //}

            //nod = n;
            //console.writeline("нод: " + nod);


            // 2011. Анализ возраста

            /*
             * Задан возраст человека — число n. Ваша задача написать программу, которая классифицирует человека по его возрасту.
             *   Если это число меньше 7, то обычно это означает, что задан дошкольник и надо вывести "preschool child".
             *   Если это число от 7 до 17, то обычно это означает, что задан школьник и надо вывести "schoolchild m", где m — это его предполагаемый класс (число от 1 до 11, считайте, что учатся в школе с 7 лет, класс меняется раз в год).
             *   Если это число от 18 до 22, то обычно это означает, что задан студент и надо вывести "student m", где m — это его предполагаемый курс (число от 1 до 5, считайте, что учатся в университете с 18 лет, курс меняется раз в год).
             *   Если это число больше 22, то выведите "specialist", что означает квалификацию "специалист".
             *
             */

            int age;
            age = Convert.ToInt32(Console.ReadLine());

            if(age <= 7)
            {
                Console.WriteLine("preschool child");
            }
            else if ((age > 7) && (age <= 17))
            {
                Console.WriteLine("schoolchild " + age);
            }
            else if ((age > 18) && (age <= 22))
            {
                Console.WriteLine("specialist " + age);
            }
            else
                Console.WriteLine("Вы ввели не то число!!!");

            


            Console.ReadLine();
        }
    }
}
